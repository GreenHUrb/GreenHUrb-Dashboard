@import url(https://fonts.googleapis.com/css?family=Lexend:100,200,300,regular,500,600,700,800,900);

:root {
    // Heading Fonts
    --large-heading1: 60px;
    --big-heading1: 50px;
    --medium-heading1: 45px;
    --small-heading1: 30px;
    --mini-heading1: 25px;

    // Paragraph Fonts
    --big-paragraph: 20px;
    --medium-paragraph: 18px;
    --normal-paragraph: 16px;
    --small-paragraph: 14px;
    --mini-paragraph: 12px;
    --micro-paragraph: 10px;
    --nano-paragraph: 8px;

    // Break Points
    --small-screen: 576px;
    --medium-screen: 768px;
    --large-screen: 992px;
    --extra-large-screen: 1200px;

    // Font Weights
    --very-light-font: 300;
    --light-font: 400;
    --medium-font: 500;
    --thick-font: 600;
    --very-thick-font: 700;

    // Border Radiuses
    --pill-shaped-radius:10px;
}

@mixin very-large-screen {
    @media (min-width: 1200px) {
        @content;
    }
}

@mixin large-screen {
    @media (min-width: 992px) {
        @content;
    }
}

@mixin medium-screen {
    @media screen and (min-width: 768px) {
        @content;
    }
}

// Color Palette
$themes: (
    light: (
        primary: #50870E,
        dark-primary: #0b6a0b,
        light-primary:rgb(#0E870E, 10%),

        text-color: #1C1C1C,
        grey-text: #878787,
        light-text: #ffffff,
        sidebar-text:rgb(#232D23, 70%),
        danger:#870E14,
        icons-bg:rgb(#D3D3D3, 10%)),
    dark: (),
);


html {
    font-size: 16px;
}

body {
    margin: 0;
    font-family: 'Lexend', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}


* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

/* Hide scrollbar for Chrome, Safari and Opera */
body::-webkit-scrollbar {
    display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
body {
    -ms-overflow-style: none;
    /* IE and Edge */
    scrollbar-width: none;
    /* Firefox */
}

@mixin themify($themes) {

    @each $theme,
    $map in $themes {
        .theme-#{$theme} & {
            $theme-map: () !global;

            @each $key,
            $submap in $map {
                $value: map-get(map-get($themes, $theme), "#{$key}");
                $theme-map: map-merge($theme-map,
                    ($key: $value,
                    )) !global;
            }

            @content;
            $theme-map: null !global;
        }
    }
}

@function themed($key) {
    @return map-get($theme-map, $key);
}